## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) const s = StringBuffer(1024);
s = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 2) const s2 = StringBuffer(1024);
s2 = _CGFW(lambda: [StringBuffer(1024)], 1)[0]
# (Line 4) const SIZE  = 4;
SIZE = _CGFW(lambda: [4], 1)[0]
# (Line 5) const BUFFER = Db(SIZE*5);
BUFFER = _CGFW(lambda: [Db(SIZE * 5)], 1)[0]
# (Line 7) function onPluginStartWorker() {
@EUDFunc
def f_onPluginStartWorker():
    # (Line 8) randomize();
    f_randomize()
    # (Line 9) SetMemory(BUFFER + 0, SetTo, 111111111);
    # (Line 10) SetMemory(BUFFER + 4, SetTo, 222222222);
    DoActions(SetMemory(BUFFER + 0, SetTo, 111111111))
    # (Line 11) SetMemory(BUFFER + 8, SetTo, 333333333);
    DoActions(SetMemory(BUFFER + 4, SetTo, 222222222))
    # (Line 12) SetMemory(BUFFER + 12, SetTo, 0);
    DoActions(SetMemory(BUFFER + 8, SetTo, 333333333))
    # (Line 13) SetMemory(BUFFER + 16, SetTo, 98765);
    DoActions(SetMemory(BUFFER + 12, SetTo, 0))
    # (Line 15) setcurpl(0);
    DoActions(SetMemory(BUFFER + 16, SetTo, 98765))
    f_setcurpl(0)
    # (Line 16) s.insert(0, "BUFFER Address: ");
    s.insert(0, "BUFFER Address: ")
    # (Line 17) foreach(i : py_range(3)) {
    for i in range(3):
        # (Line 18) s.appendf("0x{:x} ", BUFFER+i*4);
        s.appendf("0x{:x} ", BUFFER + i * 4)
        # (Line 19) }
        # (Line 20) }

    # (Line 22) function beforeTriggerExecWorker() {

@EUDFunc
def f_beforeTriggerExecWorker():
    # (Line 23) SetMemory(0x6509A0, SetTo, 0); //EUD터보
    # (Line 24) setcurpl(0);
    DoActions(SetMemory(0x6509A0, SetTo, 0))
    f_setcurpl(0)
    # (Line 25) s.DisplayAt(0);
    s.DisplayAt(0)
    # (Line 26) s2.printfAt(1, "Variable Value: {}", dwread_epd(EPD(BUFFER) + 3));
    s2.printfAt(1, "Variable Value: {}", f_dwread_epd(EPD(BUFFER) + 3))
    # (Line 27) }
    # (Line 29) function afterTriggerExecWorker() {

@EUDFunc
def f_afterTriggerExecWorker():
    # (Line 30) }
    pass
