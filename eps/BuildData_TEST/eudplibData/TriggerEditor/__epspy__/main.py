## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _TYGV, _TYSV, _TYLV, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LSH, _ALL
# (Line 1) import PluginVariables as msqcvar;
import PluginVariables as msqcvar
# (Line 2) import worker as w;
import worker as w
# (Line 4) function onPluginStart() {
@EUDFunc
def onPluginStart():
    # (Line 6) w.onPluginStartWorker();
    w.f_onPluginStartWorker()
    # (Line 8) }
    # (Line 10) function beforeTriggerExec() {

@EUDFunc
def beforeTriggerExec():
    # (Line 12) w.beforeTriggerExecWorker();
    w.f_beforeTriggerExecWorker()
    # (Line 13) }
    # (Line 15) function afterTriggerExec() {

@EUDFunc
def afterTriggerExec():
    # (Line 17) w.afterTriggerExecWorker();
    w.f_afterTriggerExecWorker()
    # (Line 18) }
    # (Line 20) function GetCountUnitFromLocation(player: TrgPlayer, loc: TrgLocation, unit: TrgUnit) {

@EUDTypedFunc([TrgPlayer, TrgLocation, TrgUnit])
def GetCountUnitFromLocation(player, loc, unit):
    # (Line 21) const read = function(x) {
    @EUDFunc
    def _lambda1(x):
        # (Line 22) return l2v(Bring(player, AtLeast, x, unit, loc));
        EUDReturn(_L2V(Bring(player, AtLeast, x, unit, loc)))
        # (Line 23) };

    read = _lambda1
    # (Line 24) return EUDBinaryMax(read, maxv=1700);
    EUDReturn(EUDBinaryMax(read, maxv=1700))
    # (Line 25) }
