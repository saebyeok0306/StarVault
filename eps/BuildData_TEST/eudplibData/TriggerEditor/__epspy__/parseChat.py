## NOTE: THIS FILE IS GENERATED BY EPSCRIPT! DO NOT MODITY
from eudplib import *
from eudplib.core.eudfunc import EUDTraceLog, EUDTracedFunc, EUDTracedTypedFunc, EUDTracedMethod, EUDTracedTypedMethod
from eudplib.epscript.helper import _RELIMP, _IGVA, _CGFW, _ARR, _VARR, _SRET, _SV, _ATTW, _ARRW, _ATTC, _ARRC, _L2V, _LVAR, _LSH
# (Line 2) function Parse(ptr) {
@EUDFunc
def Parse(ptr):
    # (Line 3) const s = StringBuffer(1024);
    s = StringBuffer(1024)
    # (Line 4) const br = EUDByteReader();
    br = EUDByteReader()
    # (Line 5) br.seekoffset(ptr);
    br.seekoffset(ptr)
    # (Line 7) s.insert(0);
    s.insert(0)
    # (Line 8) while (true) {
    if EUDWhile()(True):
        # (Line 9) const b = br.readbyte();
        b = br.readbyte()
        # (Line 10) s.appendf("{} ", b);
        s.appendf("{} ", b)
        # (Line 11) if(b == 0) break;
        if EUDIf()(b == 0):
            EUDBreak()
            # (Line 12) }
        EUDEndIf()
        # (Line 13) return s.epd;
    EUDEndWhile()
    EUDReturn(s.epd)
    # (Line 14) }
    # (Line 16) function ParseChatting() {

@EUDFunc
def ParseChatting():
    # (Line 17) const chatPtr = 0x640B60; // 218
    chatPtr = 0x640B60
    # (Line 18) const chatIdx = EPD(0x640B58);
    chatIdx = EPD(0x640B58)
    # (Line 20) var i = maskread_epd(chatIdx, 0xFF)-1;
    i = _LVAR([f_maskread_epd(chatIdx, 0xFF) - 1])
    # (Line 21) if (i > 10) i = 10;
    if EUDIf()(i <= 10, neg=True):
        i << (10)
        # (Line 22) const targetPtr = chatPtr + 218*i;
    EUDEndIf()
    targetPtr = chatPtr + 218 * i
    # (Line 24) const epd = Parse(targetPtr);
    epd = Parse(targetPtr)
    # (Line 25) eprintf("{}｜{:t}", i, epd);
    f_eprintf("{}｜{:t}", i, epd)
    # (Line 26) }
